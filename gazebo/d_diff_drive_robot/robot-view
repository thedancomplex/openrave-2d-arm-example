#!/bin/bash
# /* -*-  indent-tabs-mode:t; tab-width: 8; c-basic-offset: 8  -*- */
# /*
# Copyright (c) 2013, Daniel M. Lofaro <dan (at) danLofaro (dot) com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the author nor the names of its contributors may
#       be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# */
# Daniel M. Lofaro (dan@danlofaro.com)

export LD_LIBRARY_PATH=/usr/lib:

HUBO_VIEW_VID_CHAN='robot-vid-chan'

HUBO_REMOTE_ADDRESS='0.0.0.0'


trim()
{
  local var=$@
  echo -n "${var//[[:space:]]/}"
}


MakeAch()
{
	ach -1 -C $HUBO_VIEW_VID_CHAN -m 10 -n 3000000
        sudo chmod 777 /dev/shm/achshm-hubo-*
}

Remote()
{

case "$1" in 
'kill')
	KillRemote
;;
*)
     MakeAch
     if [[ $FLAG_VIEW_CLIENT -eq 1 ]]
     then
         achd -r pull $1 $HUBO_VIEW_VID_CHAN &
     fi

     if [[ $FLAG_VIEW_SERVER -eq 1 ]]
     then
         achd -r push $1 $HUBO_VIEW_VID_CHAN &
     fi
;;
esac

}

RunViewClient()
{
#   cd /etc/hubo-ach
   echo 'Starting hubo-view client process...'
#   screen -S huboviewclient -d -m python $HUBO_VIEW_CLIENT_DIR
#   python $HUBO_VIEW_CLIENT_DIR
   python $HUBO_VIEW_DIR/$HUBO_VIEW_CLIENT_FILE
#   sleep 5
#   if ! screen -list | grep -q "huboviewclient"; then
#        echo 'hubo-view client started: FAIL'
#   else
#  	echo 'hubo-view client started: success'
#   fi
}

RunViewServer()
{
#   cd /etc/hubo-ach
   cd $HUBO_VIEW_DIR
   echo 'Starting hubo-view server process...'
   screen -S huboviewserver -d -m python $HUBO_VIEW_SERVER_FILE
#   python $HUBO_VIEW_SERVER_DIR
#   echo $HUBO_VIEW_SERVER_DIR
   sleep 5
   if ! screen -list | grep -q "huboviewserver"; then
        echo 'hubo-view server started: FAIL'
   else
  	echo 'hubo-view server started: success'
   fi
}

RunStatus()
{
     if ! screen -list | grep -q "huboviewserver"; then
        echo 'hubo-view server started: FAIL'
     else
        echo 'hubo-view server started: success'
     fi
     if ! screen -list | grep -q "huboviewclient"; then
        echo 'hubo-view client started: FAIL'
     else
        echo 'hubo-view client started: success'
     fi
}

RunView()
{
     MakeAch
     if [[ $FLAG_VIEW_CLIENT -eq 1 ]]
     then
         RunViewClient
     fi

     if [[ $FLAG_VIEW_SERVER -eq 1 ]]
     then
         RunViewServer
     fi
}

KillRemote()
{
	sudo kill -9 $(pidof achd)
}

KillAll()
{
        screen -S huboviewserver -p 0 -X quit
        screen -S huboviewclient -p 0 -X quit
	KillRemote
}

Install()
{
case "$1" in
        'install')
                sudo mkdir $HUBO_DIR
		sudo mkdir $HUBO_VIEW_DIR
                sudo chmod -R 777 $HUBO_VIEW_DIR
                cp $HUBO_VIEW_SERVER_FILE $HUBO_VIEW_DIR
		cp $HUBO_VIEW_CLIENT_FILE $HUBO_VIEW_DIR
                cp hubo-view $HUBO_VIEW_DIR
                HUBO_VIEW_BIN="$HUBO_VIEW_DIR/hubo-view"
                sudo ln -s $HUBO_VIEW_BIN /usr/bin/hubo-view
	;;
	'remove')
		sudo rm -R $HUBO_VIEW_DIR
		sudo rm /usr/bin/hubo-view
	;;
        *)
                echo 'Install Options: '
		echo '  install         - Installs hubo-view to /etc/hubo/hubo-view/'
		echo '  remove          - Removes hubo-view'
        ;;
        esac
}

ShowUsage()
{
	echo
	echo '---- Hubo-View arg list ----'
	echo 'client        : starts client (reads from server)'
	echo 'server        : starts server' 
        echo 'remote        : Starts a remote connection to xxx.xxx.xxx.xxx via achd'
	echo '              : can put at end of any other command. '
	echo '              : if client will pull (default) to IP, if server will push'
        echo '              : Options:'
        echo '                     xxx.xxx.xxx.xxx      : sets connection to IP xxx.xxx.xxx.xxx'
        echo '                     kill                 : kills remote connections'
        echo 'install       : Installs hubo-view to /etc/hubo/hubo-view'
	echo 'remove        : Removes hubo-view'
	echo 'kill          : Kills and removes hubo-view and ach channels'
	echo 'make          : makes ach channels'
	echo
}


SetFlags()
{
HUBO_I=0
HUBO_TEMP1="$@"
HUBO_TEMP=($HUBO_TEMP1)
for var in "$@"
do
#    echo "$var"
    case "$var" in
      'server' )
          FLAG_VIEW_SERVER=1
          FLAG_VIEW_CLIENT=0
      ;;
      'client' )
          FLAG_VIEW_SERVER=0
          FLAG_VIEW_CLIENT=1
      ;;
      'remote' )
	  FLAG_REMOTE=1
          HUBO_REMOTE_ADDRESS=${HUBO_TEMP[$(($HUBO_I+1))]}
	  echo "Remote address set: "$HUBO_REMOTE_ADDRESS
      ;;
    esac
    HUBO_I=$(($HUBO_I+1))

done
}


echo '======================================'
echo '============= Hubo-View =============='
echo '========== Daniel M. Lofaro =========='
echo '========= dan@danLofaro.com =========='
echo '======================================'

SetFlags $@

## Set Remote ##
case "$1" in 
	'remote')
		Remote $2
	;;
	*)
	   if [[ $FLAG_REMOTE -eq 1 ]]
	   then
	       echo 'Starting remote connection'
	       Remote $HUBO_REMOTE_ADDRESS
	   fi
	;;
esac



## Start all other parts ##
case "$1" in
	'client' )
		RunView
	;;
        'server' )
		RunView
	;;
	'status' )
                RunStatus
 	;;
        'install' )
		Install $1
	;;
	'remove' )
		Install $1
	;;
	'make' )
		MakeAch
	;;
	'kill' )
		KillAll
	;;
	*)
		ShowUsage
		exit 1
	;;
esac

exit 0

# Local Variables:
#  indent-tabs-mode:t
#  tab-width: 8
#  c-basic-offset: 8
# End:
